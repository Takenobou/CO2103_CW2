openapi: 3.0.1

info:
  title: part1 
  version: 1.0.0
paths:
  /convenors:
    get:
      summary: List all convenors
      operationId: listConvenors
      responses:
        '200':
          description: A list of convenors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Convenor'
    post:
      summary: Create a convenor
      operationId: createConvenor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Convenor'
      responses:
        '201':
          description: Convenor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Convenor'
  /convenors/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Retrieve a specific convenor
      operationId: getConvenor
      responses:
        '200':
          description: Convenor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Convenor'
    put:
      summary: Update a specific convenor
      operationId: updateConvenor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Convenor'
      responses:
        '200':
          description: Convenor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Convenor'
    delete:
      summary: Delete a specific convenor
      operationId: deleteConvenor
      responses:
        '204':
          description: Convenor deleted
  /convenors/{id}/modules:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: List all modules taught by a convenor
      operationId: listConvenorModules
      responses:
        '200':
          description: A list of modules taught by the convenor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Module'
  /modules:
    get:
      summary: List all modules
      operationId: listModules
      responses:
        '200':
          description: A list of modules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Module'
    post:
      summary: Create a module
      operationId: createModule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '201':
          description: Module created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
  /modules/{code}:
    parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a specific module
      operationId: getModule
      responses:
        '200':
          description: Module found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
    patch:
      summary: Update a specific module partially
      operationId: updateModulePartially
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '200':
          description: Module updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
    delete:
      summary: Delete a specific module
      operationId: deleteModule
      responses:
        '204':
          description: Module deleted
  /modules/{code}/sessions:
    parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
    get:
      summary: List all sessions in a module
      operationId: listModuleSessions
      responses:
        '200':
          description: A list of sessions in the module
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
    post:
      summary: Create a session in a module
      operationId: createModuleSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
  /modules/{code}/sessions/{id}:
    parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Retrieve a specific session in a module
      operationId: getModuleSession
      responses:
        '200':
          description: Session found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
    put:
      summary: Update a specific session in a module
      operationId: updateModuleSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: Session updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
    patch:
      summary: Update a specific session in a module partially
      operationId: updateModuleSessionPartially
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: Session updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
    delete:
      summary: Delete a specific session in a module
      operationId: deleteModuleSession
      responses:
        '204':
          description: Session deleted
  /sessions:
    delete:
      summary: Delete all sessions
      operationId: deleteAllSessions
      responses:
        '204':
          description: All sessions deleted
    get:
      summary: List all sessions, allowing filtering by convenor and by module
      operationId: listSessions
      parameters:
        - name: convenor
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: module
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of sessions, filtered by convenor and module
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
components:
  schemas:
    Convenor:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        position:
          type: string
          enum:
            - GTA
            - Lecturer
            - Professor
    Module:
      type: object
      properties:
        code:
          type: string
        title:
          type: string
      level:
        type: integer
        format:
          minimum: 1
          maximum: 4
      optional:
        type: boolean
    Session:
      type: object
      properties:
        id:
          type: integer
          format: int64
        topic:
          type: string
        timestamp:
          type: string
          format: date-time
        duration:
          type: integer
